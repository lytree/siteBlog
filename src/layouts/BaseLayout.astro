---
//import "@/styles/global.scss";
import { profileConfig, siteConfig } from '@/config'
import type { Favicon } from '../types/config'

import { defaultFavicons } from '@/constants/icon'
import {
  AUTO_MODE,
  DARK_MODE,
  DEFAULT_THEME,
  LIGHT_MODE,
} from '@/constants/consts'
import { url, pathsEqual } from '@/utils/url-utils'


interface Props {
  title?: string
  banner?: string
  description?: string
}
let { title, banner, description } = Astro.props


let pageTitle: string
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`
}
const configHue = siteConfig.themeColor.hue
if (!banner || typeof banner !== 'string' || banner.trim() === '') {
  banner = siteConfig.banner.src
}
banner = siteConfig.banner.src
const enableBanner = siteConfig.banner.enable

const isHomePage = pathsEqual(Astro.url.pathname, url('/'))
const favicons: Favicon[] =
  siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons

---

<!DOCTYPE html>
<html class="h-full w-full ">
    <head>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>

		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>

		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		{favicons.map(favicon => (
			<link rel="icon"
				  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
				  sizes={favicon.sizes}
				  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
			/>
		))}
		<!-- Set the theme before the page is rendered to avoid a flash -->
		<script is:inline define:vars={{DEFAULT_THEME: DEFAULT_THEME, LIGHT_MODE: LIGHT_MODE, DARK_MODE: DARK_MODE, AUTO_MODE: AUTO_MODE}}>
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}
		</script>
        <link
            rel="stylesheet"
            href="/katex.min.css"
        />
        <script
            defer
            src="/katex.min.js"

        <script src="https://at.alicdn.com/t/c/font_4425412_z9b4ty5h5aj.js"
        ></script>
        
		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

		<style define:vars={{ configHue }}></style>  <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->
    <body class="min-h-screen bg-white dark:bg-dark transition text-gray-700 dark:text-gray-200" class:list={[{"is-home": isHomePage, "enable-banner": enableBanner}]}> <slot /></body>
</html>
<style is:global>
	:root {
		--hue: var(--configHue);
		--page-width: 75rem;
	}
</style>