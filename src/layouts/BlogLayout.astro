---
import { Icon } from "astro-icon/components";
import BaseLayout from "./BaseLayout.astro";
import Navbar from "./components/Navbar.astro";
import { url, pathsEqual } from '../utils/url-utils'
import { siteConfig } from '@/config'
import SideBar from "./components/SideBar.astro";
import GlobalFooter from "@/components/GlobalFooter.astro";
import BackToTop from "@/components/BackToTop.astro";
import ImageWrapper from "@/components/ImageWrapper.astro";
interface Props {
  title?: string
  banner?: string
  description?: string
}
// apply a class to the body element to decide the height of the banner, only used for initial page load
// Swup can update the body for each page visit, but it's after the page transition, causing a delay for banner height change
// so use Swup hooks instead to change the height immediately when a link is clicked
const isHomePage = pathsEqual(Astro.url.pathname, url('/'))

const { title,  description } = Astro.props
const hasBannerCredit =
  siteConfig.banner.enable && siteConfig.banner.credit.enable
const hasBannerLink = !!siteConfig.banner.credit.url


---

<BaseLayout  title={title} description={description}>
    <div class:list={[{"lg:is-home": isHomePage}, "enable-banner"]} data-overlayscrollbars-initialize>
        <div id="banner-wrapper" class="absolute w-full transition-all duration-700">
            <ImageWrapper id="boxtest" alt="Banner image of the blog" class:list={["object-cover h-full", {"hidden": !siteConfig.banner.enable}]}
                      src={siteConfig.banner.src} position={siteConfig.banner.position}
            >
            </ImageWrapper>
        </div>	
    
        <div class="max-w-[var(--page-width)] min-h-screen grid grid-cols-[17.5rem_auto] grid-rows-[auto_auto_1fr_auto] lg:grid-rows-[auto_1fr_auto] mx-auto gap-4 relative px-0 md:px-4">
            <div id="top-row" class="relative transition-all duration-700 col-span-2 grid-rows-1" class:list={[""]}>
                <Navbar></Navbar>
                <!-- Banner image credit -->
                {hasBannerCredit && <a href={siteConfig.banner.credit.url} id="banner-credit" target="_blank" rel="noopener" aria-label="Visit image source"
                    class:list={["group onload-animation transition-all absolute flex justify-center items-center rounded-full " +
                    "px-3 right-0 bottom-0 bg-black/60 hover:bg-black/70 h-9", {"hover:pr-9 active:bg-black/80": hasBannerLink}]}>
                    <Icon class="text-white/75 text-[1.25rem] mr-1" name="material-symbols:copyright-outline-rounded" ></Icon>
                    <div class="text-white/75 text-xs">{siteConfig.banner.credit.text}</div>
                    <Icon class:list={["transition absolute text-[oklch(0.75_0.14_var(--hue))] right-4 text-[0.75rem] opacity-0",
                        {"group-hover:opacity-100": hasBannerLink}]}
                          name="fa6-solid:arrow-up-right-from-square">
                    </Icon>
                </a>}
            </div>
            <SideBar class="row-start-3 row-end-4 col-span-2 lg:row-start-2 lg:row-end-3 lg:col-span-1 lg:max-w-[17.5rem] onload-animation"></SideBar>
            <div id="content-wrapper" class="row-start-2 row-end-3 col-span-2 lg:col-span-1 overflow-hidden onload-animation">
                <!-- the overflow-hidden here prevent long text break the layout-->
                <!-- make id different from windows.swup global property -->
                <main id="swup-container" class="transition-swup-fade">
                    <slot></slot>
                </main>
            
            </div>
            <div id="footer" class="grid-rows-3 col-span-2 mt-4 onload-animation">
                <GlobalFooter></GlobalFooter>
            </div>
            <BackToTop></BackToTop>
        </div>
    </div>
</BaseLayout>
<style is:global >
    @tailwind components;
    @tailwind utilities;
    
    @layer components {
        .enable-banner.is-home #banner-wrapper {
            @apply h-[var(--banner-height-home)] translate-y-[30vh]
        }
        .enable-banner #banner-wrapper {
            @apply h-[var(--banner-height-home)]
        }
    
        .enable-banner.is-home #banner {
            @apply h-[var(--banner-height-home)] translate-y-0
        }
        .enable-banner #banner {
            @apply h-[var(--banner-height-home)] translate-y-[30vh]
        }
        .enable-banner.is-home #main-grid {
            @apply translate-y-[30vh];
        }
        .enable-banner #top-row {
            @apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
        }
        .enable-banner.is-home #sidebar-sticky {
            @apply top-[calc(-30vh_+_1rem)]
        }
        .navbar-hidden {
            @apply opacity-0 -translate-y-16
        }
    }
</style>
<script>
import 'overlayscrollbars/overlayscrollbars.css';
import {
    OverlayScrollbars,
    // ScrollbarsHidingPlugin,
    // SizeObserverPlugin,
    // ClickScrollPlugin
} from 'overlayscrollbars';
// import {getHue, getStoredTheme, setHue, setTheme} from "../utils/setting-utils";
import {pathsEqual, url} from "../utils/url-utils";

    /* Preload fonts */
// (async function() {
// 	try {
// 		await Promise.all([
// 			document.fonts.load("400 1em Roboto"),
// 			document.fonts.load("700 1em Roboto"),
// 		]);
// 		document.body.classList.remove("hidden");
// 	} catch (error) {
// 		console.log("Failed to load fonts:", error);
// 	}
// })();

/* TODO This is a temporary solution for style flicker issue when the transition is activated */
/* issue link: https://github.com/withastro/astro/issues/8711, the solution get from here too */
/* update: fixed in Astro 3.2.4 */
/*
function disableAnimation() {
    const css = document.createElement('style')
    css.appendChild(
        document.createTextNode(
            `*{
              -webkit-transition:none!important;
              -moz-transition:none!important;
              -o-transition:none!important;
              -ms-transition:none!important;
              transition:none!important
              }`
        )
    )
    document.head.appendChild(css)

    return () => {
        // Force restyle
        ;(() => window.getComputedStyle(document.body))()

        // Wait for next tick before removing
        setTimeout(() => {
            document.head.removeChild(css)
        }, 1)
    }
}
*/

const bannerEnabled = !!document.getElementById('banner-wrapper')

function setClickOutsideToClose(panel: string, ignores: string[]) {
    document.addEventListener("click", event => {
        let panelDom = document.getElementById(panel);
        let tDom = event.target;
        if (!(tDom instanceof Node)) return;		// Ensure the event target is an HTML Node
        for (let ig of ignores) {
            let ie = document.getElementById(ig)
            if (ie == tDom || (ie?.contains(tDom))) {
                return;
            }
        }
        panelDom!.classList.add("float-panel-closed");
    });
}
setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"])
setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"])
setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"])


// function loadTheme() {
//     const theme = getStoredTheme()
//     setTheme(theme)
// }

// function loadHue() {
//     setHue(getHue())
// }

function initCustomScrollbar() {
    const bodyElement = document.querySelector('body');
    if (!bodyElement) return;
    OverlayScrollbars(
        // docs say that a initialization to the body element would affect native functionality like window.scrollTo
        // but just leave it here for now
        {
            target: bodyElement,
            cancel: {
                nativeScrollbarsOverlaid: true,    // don't initialize the overlay scrollbar if there is a native one
            }
        }, {
        scrollbars: {
            theme: 'scrollbar-base scrollbar-auto py-1',
            autoHide: 'move',
            autoHideDelay: 500,
            autoHideSuspend: false,
        },
    });
    document.querySelectorAll('pre').forEach((ele) => {
        OverlayScrollbars(ele, {
            scrollbars: {
                theme: 'scrollbar-base scrollbar-dark px-2',
                autoHide: 'leave',
                autoHideDelay: 500,
                autoHideSuspend: false
            }
        });
    });
}

function showBanner() {
    const banner = document.getElementById('banner')
    if (!banner) {
        console.error('Failed to find the banner element')
        return
    }
    banner.classList.remove('opacity-0', 'scale-105')
}

function init() {
    // disableAnimation()()		// TODO
    // loadTheme();
    // loadHue();
    initCustomScrollbar();
    showBanner();
}

/* Load settings when entering the site */
init();

/* Load settings before swapping */
/* astro:after-swap event happened before swap animation */
document.addEventListener('astro:after-swap', init);

const setup = () => {
    // TODO: temp solution to change the height of the banner
/*
    window.swup.hooks.on('animation:out:start', () => {
        const path = window.location.pathname
        const body = document.querySelector('body')
        if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
            body.classList.add('is-home')
        } else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
            body.classList.remove('is-home')
        }
    })
*/
    // Remove the delay for the first time page load
    window.swup.hooks.on('link:click', () => {
        document.documentElement.style.setProperty('--content-delay', '0ms')

        // prevent elements from overlapping the navbar
        if (!bannerEnabled) {
            return
        }
        let threshold = window.innerHeight * 0.30 - 72 - 16
        let navbar = document.getElementById('navbar-wrapper')
        if (!navbar || !document.body.classList.contains('lg:is-home')) {
            return
        }
        if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
            navbar.classList.add('navbar-hidden')
        }
    })
    window.swup.hooks.on('content:replace', initCustomScrollbar)
    window.swup.hooks.on('visit:start', (visit: {to: {url: string}}) => {
        // change banner height immediately when a link is clicked
        const bodyElement = document.querySelector('body')
        if (pathsEqual(visit.to.url, url('/'))) {
            bodyElement!.classList.add('lg:is-home');
        } else {
            bodyElement!.classList.remove('lg:is-home');
        }

        // increase the page height during page transition to prevent the scrolling animation from jumping
        const heightExtend = document.getElementById('page-height-extend')
        if (heightExtend) {
            heightExtend.classList.remove('hidden')
        }
    });
    window.swup.hooks.on('page:view', () => {
        // hide the temp high element when the transition is done
        const heightExtend = document.getElementById('page-height-extend')
        if (heightExtend) {
            heightExtend.classList.remove('hidden')
        }
    });
    window.swup.hooks.on('visit:end', (visit: {to: {url: string}}) => {
        // execute 1s later
        const heightExtend = document.getElementById('page-height-extend')
        if (heightExtend) {
            heightExtend.classList.add('hidden')
        }
    });
}
if (window?.swup?.hooks) {
    setup()
} else {
    document.addEventListener('swup:enable', setup)
}

let backToTopBtn = document.getElementById('back-to-top-btn');
let navbar = document.getElementById('navbar-wrapper')
function scrollFunction() {
    if (backToTopBtn) {
        if (document.body.scrollTop > 600 || document.documentElement.scrollTop > 600) {
            backToTopBtn.classList.remove('hide')
        } else {
            backToTopBtn.classList.add('hide')
        }
    }

    if (!bannerEnabled) return
    if (navbar) {
        let threshold = window.innerHeight * 0.30 - 72 - 16
        if (document.body.classList.contains('lg:is-home') && window.innerWidth >= 1024) {
            threshold = window.innerHeight * 0.60 - 72 - 16
        }
        if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
            navbar.classList.add('navbar-hidden')
        } else {
            navbar.classList.remove('navbar-hidden')
        }
    }
}
window.onscroll = scrollFunction

</script>
    
<script>
import PhotoSwipeLightbox from "photoswipe/lightbox"
import "photoswipe/style.css"

let lightbox: PhotoSwipeLightbox
let pswp = import("photoswipe")

function createPhotoSwipe() {
    lightbox = new PhotoSwipeLightbox({
        gallery: ".custom-md img, #post-cover img",
        pswpModule: () => pswp,
        closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
        zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
        padding: { top: 20, bottom: 20, left: 20, right: 20 },
        wheelToZoom: true,
        arrowPrev: false,
        arrowNext: false,
        imageClickAction: 'close',
        tapAction: 'close',
        doubleTapAction: 'zoom',
    })

    lightbox.addFilter("domItemData", (itemData, element) => {
        if (element instanceof HTMLImageElement) {
            itemData.src = element.src

            itemData.w = Number(element.naturalWidth || window.innerWidth)
            itemData.h = Number(element.naturalHeight || window.innerHeight)

            itemData.msrc = element.src
        }

        return itemData
    })

    lightbox.init()
}

const setup = () => {
    if (!lightbox) {
        createPhotoSwipe()
    }
    window.swup.hooks.on("page:view", () => {
        createPhotoSwipe()
    })

    window.swup.hooks.on(
        "content:replace",
        () => {
            lightbox?.destroy?.()
        },
        { before: true },
    )
}

if (window.swup) {
    setup()
} else {
    document.addEventListener("swup:enable", setup)
}
</script>
    