---
import { profileConfig, siteConfig } from '@/blog-config';
import type { Favicon } from '../types/config';

import { defaultFavicons } from '@/constants/icon';
import { AUTO_MODE, DARK_MODE, DEFAULT_THEME, LIGHT_MODE } from '@/constants/consts';
import { url, pathsEqual } from '@/theme/blog/utils/url-utils';

import GlobalStyles from '@/components/GlobalStyles.astro';

interface Props {
  title?: string;
  description?: string;
  bodyClass?: string;
  htmlClass?: string;
}
let { title, description, bodyClass, htmlClass } = Astro.props;

let pageTitle: string;
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`;
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}
const configHue = siteConfig.themeColor.hue;
const favicons: Favicon[] = siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;
---

<!doctype html>
<html class:list={[htmlClass, 'h-full w-full bg-[var(--page-bg)] text-[14px] transition md:text-[16px]']}>
  <head>
    <title>{pageTitle}</title>

    <meta charset="UTF-8" />
    <meta name="description" content={description || pageTitle} />
    <meta name="author" content={profileConfig.name} />

    <meta property="og:site_name" content={siteConfig.title} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description || pageTitle} />

    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={description || pageTitle} />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    {
      favicons.map((favicon) => (
        <link
          rel="icon"
          href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
          sizes={favicon.sizes}
          media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
        />
      ))
    }
    <!-- Set the theme before the page is rendered to avoid a flash -->
    <script is:inline define:vars={{ DEFAULT_THEME: DEFAULT_THEME, LIGHT_MODE: LIGHT_MODE, DARK_MODE: DARK_MODE, AUTO_MODE: AUTO_MODE }}>
      const theme = localStorage.getItem('theme') || DEFAULT_THEME;
      switch (theme) {
        case LIGHT_MODE:
          document.documentElement.classList.remove('dark');
          document.documentElement.setAttribute('data-bs-theme', 'light');
          break;
        case DARK_MODE:
          document.documentElement.classList.add('dark');
          document.documentElement.setAttribute('data-bs-theme', 'dark');
          break;
        case AUTO_MODE:
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
            document.documentElement.setAttribute('data-bs-theme', 'dark');
          } else {
            document.documentElement.classList.remove('dark');
            document.documentElement.setAttribute('data-bs-theme', 'light');
          }
      }
    </script>
    <link rel="stylesheet" href="/css/katex.min.css" />
    <script defer src="/scripts/katex.min.js"></script>
    <script defer src="/scripts/flowbite.min.js"></script>
    <script src="https://at.alicdn.com/t/c/font_4425412_z9b4ty5h5aj.js"></script>
    <link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`} />

    <style define:vars={{ configHue }}></style>
    <!-- defines global css variables. This will be applied to <html> <body> and some other elements idk why -->
  </head>
  <body class="min-h-screen bg-white text-gray-700 transition dark:bg-[#1b1b1f] dark:text-gray-200" class:list={[bodyClass]}>
    <GlobalStyles><slot /></GlobalStyles>
  </body>
</html>
<style is:global>
  :root {
    --hue: var(--configHue);
    --page-width: 75rem;
  }
</style>
