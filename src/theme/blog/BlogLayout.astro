---
import Footer from './components/Footer.astro'
import Navbar from './components/Navbar.astro'
import BackToTop from './components/BackToTop.astro'
import SideBar from './components/SideBar.astro'
import Layout from '../BaseLayout.astro'
import { Icon } from 'astro-icon/components'
import { siteConfig } from '@/blog-config'
import type { MarkdownHeading } from 'astro'
import TOC from "./components/TOC.astro";
import ImageWrapper from "./components/ImageWrapper.astro";
import {BANNER_HEIGHT, BANNER_HEIGHT_EXTEND, BANNER_HEIGHT_HOME, MAIN_PANEL_OVERLAPS_BANNER_HEIGHT} from "./constants/constants";
import GlobalStyles from './components/GlobalStyles.astro'
import ConfigCarrier from './components/ConfigCarrier.astro'
import { pathsEqual, url } from './utils/url-utils'

interface Props {
  title?: string
  banner?: string
  description?: string
  setOGTypeArticle?: boolean;
  headings? : MarkdownHeading[]
}

const { title, banner, description, setOGTypeArticle, headings = [] } = Astro.props


const isHomePage = pathsEqual(Astro.url.pathname, url('/blog'));

const hasBannerCredit =
  siteConfig.banner.enable && siteConfig.banner.credit.enable
const hasBannerLink = !!siteConfig.banner.credit.url

const mainPanelTop = siteConfig.banner.enable ? `calc(${BANNER_HEIGHT}vh - ${MAIN_PANEL_OVERLAPS_BANNER_HEIGHT}rem)` : "5.5rem"

const bannerOffsetByPosition = {
  top: `${BANNER_HEIGHT_EXTEND}vh`,
  center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
  bottom: '0'
};
// @ts-ignore
const bannerOffset = bannerOffsetByPosition[siteConfig.banner.position || 'center'];
var bodyClass = [{ 'lg:is-home': isHomePage, 'enable-banner':true}]

---

<Layout title={title} description={description} bodyClass={bodyClass}>
    <ConfigCarrier />
    <GlobalStyles>
<!-- Navbar -->
<slot slot="head" name="head"></slot>
<div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-0 md:px-4 mx-auto" class:list={[""]}>
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
        <Navbar></Navbar>
    </div>
</div>

<!-- Banner -->
{siteConfig.banner.enable && <div id="banner-wrapper" class=`absolute z-10 w-full transition duration-700 overflow-hidden` style=`top: -${BANNER_HEIGHT_EXTEND}vh`>
    <ImageWrapper id="banner" alt="Banner image of the blog" class:list={["object-cover h-full transition duration-700 opacity-0 scale-105"]}
                  src={siteConfig.banner.src} position={siteConfig.banner.position}
    >
    </ImageWrapper>
</div>}

<!-- Main content -->
<div class="absolute w-full z-30 pointer-events-none" style=`top: ${mainPanelTop}`>
    <!-- The pointer-events-none here prevent blocking the click event of the TOC -->
    <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
        <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto]
    mx-auto gap-4 px-0 md:px-4"
        >
            <!-- Banner image credit -->
            {hasBannerCredit && <a href={siteConfig.banner.credit.url} id="banner-credit" target="_blank" rel="noopener" aria-label="Visit image source"
                                   class:list={["group onload-animation transition-all absolute flex justify-center items-center rounded-full " +
                                   "px-3 right-4 -top-[3.25rem] bg-black/60 hover:bg-black/70 h-9", {"hover:pr-9 active:bg-black/80": hasBannerLink}]}
            >
                <Icon class="text-white/75 text-[1.25rem] mr-1" name="material-symbols:copyright-outline-rounded" ></Icon>
                <div class="text-white/75 text-xs">{siteConfig.banner.credit.text}</div>
                <Icon class:list={["transition absolute text-[oklch(0.75_0.14_var(--hue))] right-4 text-[0.75rem] opacity-0",
                    {"group-hover:opacity-100": hasBannerLink}]}
                      name="fa6-solid:arrow-up-right-from-square">
                </Icon>
            </a>}


            <SideBar class="mb-4 row-start-2 row-end-3 col-span-2 lg:row-start-1 lg:row-end-2 lg:col-span-1 lg:max-w-[17.5rem] onload-animation" ></SideBar>

            <main id="swup-container" class="transition-swup-fade col-span-2 lg:col-span-1 overflow-hidden">
                <div id="content-wrapper" class="onload-animation">
                    <!-- the overflow-hidden here prevent long text break the layout-->
                    <!-- make id different from windows.swup global property -->
                    <slot></slot>
                    <div class="footer col-span-2 onload-animation hidden lg:block">
                        <Footer isDark={true}></Footer>
                    </div>
                </div>
            </main>

            <div class="footer col-span-2 onload-animation block lg:hidden">
                <Footer></Footer>
            </div>
        </div>

        <BackToTop></BackToTop>
    </div>
</div>

<!-- The things that should be under the banner, only the TOC for now -->
<div class="absolute w-full z-0">
    <div class="relative max-w-[var(--page-width)] mx-auto">
        <!-- TOC component -->
        {siteConfig.toc.enable && <div id="toc-wrapper" class:list={["hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] items-center",
            {"toc-hide": siteConfig.banner.enable}]}
        >
            <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
                <div id="toc" class="w-full h-full transition-swup-fade ">
                    <div class="h-8 w-full"></div>
                    <TOC headings={headings}></TOC>
                    <div class="h-8 w-full"></div>
                </div>
            </div>
        </div>}

        <!-- #toc needs to exist for Swup to work normally -->
        {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
</div></GlobalStyles>
    <!-- increase the page height during page transition to prevent the scrolling animation from jumping -->
    <div id="page-height-extend" class="hidden h-[300vh]"></div>
</Layout>
<style
  is:global
  define:vars={{
    bannerOffset,
    'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
    'banner-height': `${BANNER_HEIGHT}vh`
  }}
>

    .enable-banner.is-home #banner-wrapper {
      --at-apply: h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)];
    }
    .enable-banner #banner-wrapper {
      --at-apply: h-[var(--banner-height-home)];
    }

    .enable-banner.is-home #banner {
      --at-apply: h-[var(--banner-height-home)] translate-y-0;
    }
    .enable-banner #banner {
      --at-apply: h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)];
    }
    .enable-banner.is-home #main-grid {
      --at-apply: translate-y-[var(--banner-height-extend)];
    }
    .enable-banner #top-row {
      --at-apply: h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300;
    }
    .enable-banner.is-home #sidebar-sticky {
      --at-apply: top-[calc(1rem_-_var(--banner-height-extend))];
    }
    .navbar-hidden {
      --at-apply: -translate-y-16 opacity-0;
    }
  
</style>

<script>
  import 'overlayscrollbars/overlayscrollbars.css';
  import {
    OverlayScrollbars
    // ScrollbarsHidingPlugin,
    // SizeObserverPlugin,
    // ClickScrollPlugin
  } from 'overlayscrollbars';
  import { getHue, getStoredTheme, setHue, setTheme } from './utils/setting-utils';
  import { pathsEqual, url } from './utils/url-utils';
  import { BANNER_HEIGHT, BANNER_HEIGHT_HOME, BANNER_HEIGHT_EXTEND, MAIN_PANEL_OVERLAPS_BANNER_HEIGHT, PAGE_WIDTH } from './constants/constants';



  const bannerEnabled = !!document.getElementById('banner-wrapper');

  //   function setClickOutsideToClose(panel: string, ignores: string[]) {
  //     document.addEventListener('click', (event) => {
  //       let panelDom = document.getElementById(panel);
  //       let tDom = event.target;
  //       if (!(tDom instanceof Node)) return; // Ensure the event target is an HTML Node
  //       for (let ig of ignores) {
  //         let ie = document.getElementById(ig);
  //         if (ie == tDom || ie?.contains(tDom)) {
  //           return;
  //         }
  //       }
  //       panelDom!.classList.add('float-panel-closed');
  //     });
  //   }
  //   setClickOutsideToClose('display-setting', ['display-setting', 'display-settings-switch']);
  //   setClickOutsideToClose('nav-menu-panel', ['nav-menu-panel', 'nav-menu-switch']);
  //   setClickOutsideToClose('search-panel', ['search-panel', 'search-bar', 'search-switch']);

  function loadTheme() {
    const theme = getStoredTheme();
    setTheme(theme);
  }

  function loadHue() {
    setHue(getHue());
  }

  function initCustomScrollbar() {
    const bodyElement = document.querySelector('body');
    if (!bodyElement) return;
    OverlayScrollbars(
      // docs say that a initialization to the body element would affect native functionality like window.scrollTo
      // but just leave it here for now
      {
        target: bodyElement,
        cancel: {
          nativeScrollbarsOverlaid: true // don't initialize the overlay scrollbar if there is a native one
        }
      },
      {
        scrollbars: {
          theme: 'scrollbar-base scrollbar-auto py-1',
          autoHide: 'move',
          autoHideDelay: 500,
          autoHideSuspend: false
        }
      }
    );
    document.querySelectorAll('pre').forEach((ele) => {
      OverlayScrollbars(ele, {
        scrollbars: {
          theme: 'scrollbar-base scrollbar-dark px-2',
          autoHide: 'leave',
          autoHideDelay: 500,
          autoHideSuspend: false
        }
      });
    });
  }

  function showBanner() {
    const banner = document.getElementById('banner');
    if (!banner) {
      console.error('Failed to find the banner element');
      return;
    }
    banner.classList.remove('opacity-0', 'scale-105');
  }

  function init() {
    // disableAnimation()()		// TODO
    loadTheme();
    loadHue();
    initCustomScrollbar();
    showBanner();
  }

  /* Load settings when entering the site */
  init();

  /* Load settings before swapping */
  /* astro:after-swap event happened before swap animation */
  document.addEventListener('astro:after-swap', init);

  const setup = () => {
    // TODO: temp solution to change the height of the banner
    /*
	window.swup.hooks.on('animation:out:start', () => {
		const path = window.location.pathname
		const body = document.querySelector('body')
		if (path[path.length - 1] === '/' && !body.classList.contains('is-home')) {
			body.classList.add('is-home')
		} else if (path[path.length - 1] !== '/' && body.classList.contains('is-home')) {
			body.classList.remove('is-home')
		}
	})
*/
    window.swup.hooks.on('link:click', () => {
      // Remove the delay for the first time page load
      document.documentElement.style.setProperty('--content-delay', '0ms');

      // prevent elements from overlapping the navbar
      if (!bannerEnabled) {
        return;
      }
      let threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 72 - 16;
      let navbar = document.getElementById('navbar-wrapper');
      console.log('click', navbar);
      if (!navbar || !document.body.classList.contains('lg:is-home')) {
        return;
      }
      if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
        navbar.classList.add('navbar-hidden');
      }
    });
    window.swup.hooks.on('content:replace', initCustomScrollbar);
    window.swup.hooks.on('visit:start', (visit: { to: { url: string } }) => {
      // change banner height immediately when a link is clicked
      const bodyElement = document.querySelector('body');
      if (pathsEqual(visit.to.url, url('/blog'))) {
        bodyElement!.classList.add('lg:is-home');
      } else {
        bodyElement!.classList.remove('lg:is-home');
      }

      // increase the page height during page transition to prevent the scrolling animation from jumping
      const heightExtend = document.getElementById('page-height-extend');
      if (heightExtend) {
        heightExtend.classList.remove('hidden');
      }

      // Hide the TOC while scrolling back to top
      let toc = document.getElementById('toc-wrapper');
      if (toc) {
        toc.classList.add('toc-not-ready');
      }
    });
    window.swup.hooks.on('page:view', () => {
      // hide the temp high element when the transition is done
      const heightExtend = document.getElementById('page-height-extend');
      if (heightExtend) {
        heightExtend.classList.remove('hidden');
      }
    });
    window.swup.hooks.on('visit:end', (visit: { to: { url: string } }) => {
      setTimeout(() => {
        const heightExtend = document.getElementById('page-height-extend');
        if (heightExtend) {
          heightExtend.classList.add('hidden');
        }

        // Just make the transition looks better
        const toc = document.getElementById('toc-wrapper');
        if (toc) {
          toc.classList.remove('toc-not-ready');
        }
      }, 200);
    });
  };
  if (window?.swup?.hooks) {
    setup();
  } else {
    document.addEventListener('swup:enable', setup);
  }

  let backToTopBtn = document.getElementById('back-to-top-btn');
  let toc = document.getElementById('toc-wrapper');
  let navbar = document.getElementById('navbar-wrapper');
  function scrollFunction() {
    let bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100);

    if (backToTopBtn) {
      if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
        backToTopBtn.classList.remove('hide');
      } else {
        backToTopBtn.classList.add('hide');
      }
    }

    if (bannerEnabled && toc) {
      if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
        toc.classList.remove('toc-hide');
      } else {
        toc.classList.add('toc-hide');
      }
    }

    if (!bannerEnabled) return;
    if (navbar) {
      const NAVBAR_HEIGHT = 72;
      const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16; // The height the main panel overlaps the banner

      let bannerHeight = BANNER_HEIGHT;
      if (document.body.classList.contains('lg:is-home') && window.innerWidth >= 1024) {
        bannerHeight = BANNER_HEIGHT_HOME;
      }
      let threshold = window.innerHeight * (bannerHeight / 100) - NAVBAR_HEIGHT - MAIN_PANEL_EXCESS_HEIGHT - 16;
      if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
        navbar.classList.add('navbar-hidden');
      } else {
        navbar.classList.remove('navbar-hidden');
      }
    }
  }
  window.onscroll = scrollFunction;

  window.onresize = () => {
    // calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
    let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
    offset = offset - (offset % 4);
    document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);

    // calculate the width of TOC widget
    const rootFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
    const mainGridWidthPx = PAGE_WIDTH * rootFontSize;
    const tocWidth = (window.innerWidth - mainGridWidthPx) / 2 - rootFontSize;
    document.documentElement.style.setProperty('--toc-width', `${tocWidth}px`);
  };
</script>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  let lightbox: PhotoSwipeLightbox;
  let pswp = import('photoswipe');

  function createPhotoSwipe() {
    lightbox = new PhotoSwipeLightbox({
      gallery: '.custom-md img, #post-cover img',
      pswpModule: () => pswp,
      closeSVG:
        '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
      zoomSVG:
        '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
      padding: { top: 20, bottom: 20, left: 20, right: 20 },
      wheelToZoom: true,
      arrowPrev: false,
      arrowNext: false,
      imageClickAction: 'close',
      tapAction: 'close',
      doubleTapAction: 'zoom'
    });

    lightbox.addFilter('domItemData', (itemData, element) => {
      if (element instanceof HTMLImageElement) {
        itemData.src = element.src;

        itemData.w = Number(element.naturalWidth || window.innerWidth);
        itemData.h = Number(element.naturalHeight || window.innerHeight);

        itemData.msrc = element.src;
      }

      return itemData;
    });

    lightbox.init();
  }

  const setup = () => {
    if (!lightbox) {
      createPhotoSwipe();
    }
    window.swup.hooks.on('page:view', () => {
      createPhotoSwipe();
    });

    window.swup.hooks.on(
      'content:replace',
      () => {
        lightbox?.destroy?.();
      },
      { before: true }
    );
  };

  if (window.swup) {
    setup();
  } else {
    document.addEventListener('swup:enable', setup);
  }
</script>